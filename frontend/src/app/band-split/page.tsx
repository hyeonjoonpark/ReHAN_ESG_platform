 'use client';

import { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import Header from '@/components/Header';
import BottomInquire from '@/components/BottomInquire';
import RightSection from '@/components/RightSection';
import CompleteModal from '@/components/CompleteModal';
import StartSplitBandSections from '@/components/StartSplitBandSections';
import { useRouter } from 'next/navigation';
import { getFormattedCurrentTime } from '@/utils/updateTime';
import OpenGateSection from '@/components/OpenGateSection';
import CheckSection from '@/components/CheckResourceSection';
import ResourceErrorSection from '@/components/ResourceErrorSection';
import NormallyEndSection from '@/components/NormallyEndSection';
import { SectionType } from '@/types/SectionType';
import { useSocket } from '@/hooks/useSocket';

// ÏãúÎ¶¨Ïñº Ìè¨Ìä∏ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò
interface SerialPortResponse {
  status: string;
  message: string;
}

const BandSplit = () => {
  const [currentTime, setCurrentTime] = useState<string>('');
  const [isCompleteModalOpen, setIsCompleteModalOpen] = useState(false);
  const [userHavedPoints, setUserHavedPoints] = useState<number>(0);
  const [currentCount, setCurrentCount] = useState<number>(0);
  const [remainingCount, setRemainingCount] = useState<number>(100);
  const earnedPoints = 10; // TODO: Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú ÏàòÏ†ï
  const totalPoints = userHavedPoints ? Number(userHavedPoints) + earnedPoints : earnedPoints;
  const router = useRouter();

  const [sectionType, setSectionType] = useState<SectionType>(SectionType.START_SPLIT_BAND);
  const [waitingForHardware, setWaitingForHardware] = useState<boolean>(false);
  const [retryCount, setRetryCount] = useState<number>(0);

  // ÏÜåÏºì ÌÜµÏã† ÌõÖ ÏÇ¨Ïö©
  const { 
    socket, 
    isConnected, 
    beltSeparatorCompleted, 
    petInserted,
    normallyEnd,
    joinPage,
    leavePage,
    requestHardwareStatus
  } = useSocket();

  const errorMessage: string = 'ÎÇ¥Ïö©Î¨ºÏùÑ Ï†úÍ±∞Ìï¥Ï£ºÏÑ∏Ïöî!';

  // ÌéòÏù¥ÏßÄ ÏßÑÏûÖ Ïãú ÏÜåÏºì ÌÜµÏã† Î∞è ÏãúÎ¶¨Ïñº Ìè¨Ìä∏ Í¥ÄÎ¶¨
  const initializedRef = useRef(false);

  useEffect(() => {
    if (!isConnected || !socket || initializedRef.current) return;
    initializedRef.current = true;

    joinPage('band-split');
    console.log('üì° Ï¥àÍ∏∞ ÏßÑÏûÖ - ÏãúÎ¶¨Ïñº Ìè¨Ìä∏ Ïó¥Í∏∞ Î∞è ÏÉÅÌÉú ÏöîÏ≤≠ (open_gate ÏßÄÏó∞)');
    socket.emit('serial_port_open');
    requestHardwareStatus();

    const handleSerialOpened = (data: SerialPortResponse) => {
      console.log('‚úÖ ÏãúÎ¶¨Ïñº Ìè¨Ìä∏ Ïó¥Î¶º ÏùëÎãµ:', data);
    };
    const handleSerialError = (error: SerialPortResponse) => {
      console.error('‚ùå ÏãúÎ¶¨Ïñº Ìè¨Ìä∏ Ïò§Î•ò:', error);
    };

    socket.on('serial_port_opened', handleSerialOpened);
    socket.on('serial_port_error', handleSerialError);

    // Î∞±ÏóîÎìúÏóêÏÑú Ï†ÑÌôîÎ≤àÌò∏ ÏöîÏ≤≠ Ïãú ÏùëÎãµ
    socket.on('request_phone_number', () => {
      const phoneNumber = localStorage.getItem('phone_number');
      if (phoneNumber) {
        console.log('üì± Î∞±ÏóîÎìúÏóêÏÑú Ï†ÑÌôîÎ≤àÌò∏ ÏöîÏ≤≠, ÏùëÎãµ Ï†ÑÏÜ°:', phoneNumber);
        socket.emit('phone_number_response', phoneNumber);
      } else {
        console.warn('‚ö†Ô∏è localStorageÏóê Ï†ÑÌôîÎ≤àÌò∏Í∞Ä ÏóÜÏñ¥ ÏùëÎãµÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
      }
    });

    return () => {
      leavePage('band-split');
      socket.off('serial_port_opened', handleSerialOpened);
      socket.off('serial_port_error', handleSerialError);
      socket.off('request_phone_number');
      initializedRef.current = false;
    };
  }, [isConnected, socket, joinPage, leavePage, requestHardwareStatus]);

  // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÎßàÏö¥Ìä∏ ÌõÑ localStorageÏóêÏÑú ÏÇ¨Ïö©Ïûê Î≥¥Ïú† Ìè¨Ïù∏Ìä∏ Î°úÎìú
  useEffect(() => {
    if (typeof window === 'undefined') return;
    try {
      const stored = window.localStorage.getItem('user_point');
      const n = Number(stored);
      setUserHavedPoints(Number.isFinite(n) ? n : 0);
    } catch {
      setUserHavedPoints(0);
    }
  }, []);

  // Ïò§Îäò ÏÇ¨Ïö© Ïù¥Î†• Í∞úÏàò Î∂àÎü¨Ïò§Í∏∞ -> currentCount, remainingCount ÏÑ§Ï†ï
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const phone = window.localStorage.getItem('phone_number');
    if (!phone) {
      setCurrentCount(0);
      setRemainingCount(100);
      return;
    }
    const fetchCount = async () => {
      try {
        const res = await axios.get('/api/v1/usage/today-count', { params: { phone_number: phone } });
        const count = Number(res.data?.count ?? 0);
        setCurrentCount(Number.isFinite(count) ? count : 0);
        setRemainingCount(Math.max(0, 100 - (Number.isFinite(count) ? count : 0)));
      } catch {
        setCurrentCount(0);
        setRemainingCount(100);
      }
    };
    fetchCount();
  }, []);

  // ÌïòÎìúÏõ®Ïñ¥ ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ Î∞è ÌôîÎ©¥ Ï†ÑÌôò
  useEffect(() => {
    const handleHopperReady = () => {
      console.log('‚úÖ Ìà¨ÏûÖÍµ¨ Ï§ÄÎπÑ ÏôÑÎ£å, Ìà¨ÏûÖÍµ¨ Ïó¥Í∏∞ ÏöîÏ≤≠');
      if (socket) {
        socket.emit('open_gate');
      }
    };

      // Îù†Î∂ÑÎ¶¨ ÏôÑÎ£å Ïãú ÏÑπÏÖò ÌÉÄÏûÖ Î≥ÄÍ≤Ω
  if (beltSeparatorCompleted && sectionType === SectionType.START_SPLIT_BAND) {
    console.log('‚úÖ Îù† Î∂ÑÎ¶¨ ÏôÑÎ£å - ÏÑπÏÖò ÌÉÄÏûÖÏùÑ OPEN_GATEÎ°ú Î≥ÄÍ≤Ω');
    setWaitingForHardware(false);
    setSectionType(SectionType.OPEN_GATE);
  }

  // belt_separator: 1 Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ïãú START_SPLIT_BANDÎ°ú Ï†ÑÌôò (Ï∂îÍ∞Ä Ìà¨ÏûÖ Î™®Îìú)
  if (!beltSeparatorCompleted && sectionType === SectionType.NORMALLY_END) {
    console.log('üîÑ belt_separator: 1 ÏàòÏã† - START_SPLIT_BANDÎ°ú Ï†ÑÌôòÌïòÏó¨ Ï∂îÍ∞Ä Ìà¨ÏûÖ Î™®Îìú ÏãúÏûë');
    setWaitingForHardware(true);
    setRetryCount(0);
    setSectionType(SectionType.START_SPLIT_BAND);
  }
    
    if (socket) socket.on('hopper_ready', handleHopperReady);

    // ÌéòÌä∏Î≥ë Ìà¨ÏûÖ Í∞êÏßÄ Ïãú (ÏàòÏ†ï: petInserted ÏûêÎèô ÏßÑÌñâ Î°úÏßÅ Ï†úÍ±∞)
    // if (petInserted && sectionType === SectionType.OPEN_GATE) {
    //   console.log('‚úÖ ÌéòÌä∏Î≥ë Ìà¨ÏûÖ Í∞êÏßÄ - CHECK_RESOURCEÎ°ú Î≥ÄÍ≤Ω ÌõÑ 7Ï¥à Îí§ Ï†ïÏÉÅÎ∞∞Ï∂ú');
    //   setSectionType(SectionType.CHECK_RESOURCE);
    //
    //   const timer = setTimeout(() => {
    //     if (socket) {
    //       const normalEndData = {
    //         motor_stop: 0,
    //         hopper_open: 0,
    //         status_ok: 1,
    //         status_error: 0,
    //         grinder_on: 0,
    //         grinder_off: 0,
    //         grinder_foword: 0,
    //         grinder_reverse: 0,
    //         grinder_stop: 0,
    //       };
    //       // Î∞±ÏóîÎìúÏóê Ï†ïÏÉÅ Î∞∞Ï∂ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    //       socket.emit('serial_data', normalEndData);
    //       // ÌôîÎ©¥ÏùÑ Ï†ïÏÉÅ Ï¢ÖÎ£å ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
    //       setSectionType(SectionType.NORMALLY_END);
    //     }
    //   }, 7000);
    //
    //   // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    //   return () => clearTimeout(timer);
    // }

    // useSocket ÌõÖÏóêÏÑú normally_end Ïù¥Î≤§Ìä∏Î•º Î∞õÏúºÎ©¥ ÌôîÎ©¥ Ï†ÑÌôò (ÌÉÄÏù¥Î®∏ Í∏∞Î∞òÏúºÎ°ú Î≥ÄÍ≤Ω)
    // if (normallyEnd && sectionType === SectionType.CHECK_RESOURCE) {
    //   console.log('‚úÖ Ï†ïÏÉÅ Ï¢ÖÎ£å Ïã†Ìò∏ ÏàòÏã† - NORMALLY_ENDÎ°ú Î≥ÄÍ≤Ω');
    //   setSectionType(SectionType.NORMALLY_END);
    // }
    
    return () => {
      if (socket) socket.off('hopper_ready', handleHopperReady);
    };
  }, [beltSeparatorCompleted, petInserted, normallyEnd, sectionType, socket]);

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï∏Îì§Îü¨
  const handleLogout = () => {
    if (socket) {
      socket.emit('serial_data', { logout: 1 });
    }
    router.replace('/');
  };

  // Îù†Î∂ÑÎ¶¨ ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ïãú Ìà¨ÏûÖÍµ¨ Ïò§Ìîà Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
  useEffect(() => {
    if (beltSeparatorCompleted) {
      console.log('‚úÖ Îù†Î∂ÑÎ¶¨ ÏôÑÎ£å - Ìà¨ÏûÖÍµ¨ Ïò§Ìîà Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°');
      if (socket) {
        const openGateCommand = {"motor_stop":0,"hopper_open":1,"status_ok":0,"status_error":0,"grinder_on":0,"grinder_off":0,"grinder_foword":0,"grinder_reverse":0,"grinder_stop":0};
        socket.emit('serial_data', openGateCommand);
      }
    }
  }, [beltSeparatorCompleted, socket]);

  // Ìà¨ÏûÖ ÏôÑÎ£å Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏûêÏõê ÌôïÏù∏ Ï§ë ÌéòÏù¥ÏßÄ ÌëúÏãú
  const handleCompleteClick = () => {
    if (socket && sectionType === SectionType.OPEN_GATE) {
      console.log('‚úÖ Ìà¨ÏûÖ ÏôÑÎ£å Î≤ÑÌäº ÌÅ¥Î¶≠ - ÏûêÏõê ÌôïÏù∏ Ï§ë ÌéòÏù¥ÏßÄÎ°ú Ï†ÑÌôò');
      socket.emit('serial_data', { input_pet: 1 });
      setSectionType(SectionType.CHECK_RESOURCE);
    }
  };

  // Ìà¨ÏûÖ ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÌõÑ Ï†ïÏÉÅ ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÌôîÎ©¥ Ï†ÑÌôò
  useEffect(() => {
    if (petInserted) {
      console.log('‚úÖ Ìà¨ÏûÖ ÏôÑÎ£å Îç∞Ïù¥ÌÑ∞ ÏàòÏã† - Ï†ïÏÉÅ ÏÉÅÌÉú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÌôîÎ©¥ Ï†ÑÌôò');
      if (socket) {
        const normalStateCommand = {"motor_stop":0,"hopper_open":0,"status_ok":1,"status_error":0,"grinder_on":0,"grinder_off":0,"grinder_foword":0,"grinder_reverse":0,"grinder_stop":0};
        socket.emit('serial_data', normalStateCommand);
      }
      setSectionType(SectionType.CHECK_RESOURCE);
    }
  }, [petInserted, socket]);

  // Í∑∏ÎùºÏù∏Îçî ÏûëÎèô Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ïãú Í∑∏ÎùºÏù∏Îçî Ï†ïÎ∞©Ìñ• ÏûëÎèô Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÌôîÎ©¥ Ï†ÑÌôò
  useEffect(() => {
    if (normallyEnd) {
      console.log('‚úÖ Í∑∏ÎùºÏù∏Îçî ÏûëÎèô Îç∞Ïù¥ÌÑ∞ ÏàòÏã† - Í∑∏ÎùºÏù∏Îçî Ï†ïÎ∞©Ìñ• ÏûëÎèô Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÌôîÎ©¥ Ï†ÑÌôò');
      if (socket) {
        const grinderForwardCommand = {"motor_stop":0,"hopper_open":0,"status_ok":0,"status_error":0,"grinder_on":0,"grinder_off":0,"grinder_foword":1,"grinder_reverse":0,"grinder_stop":0};
        socket.emit('serial_data', grinderForwardCommand);
      }
      setSectionType(SectionType.NORMALLY_END);
    }
  }, [normallyEnd, socket]);

  // Ìà¨ÏûÖÍµ¨ Ïò§Ìîà ÏôÑÎ£å Ìï∏Îì§Îü¨
  const handleGateOpened = () => {
    console.log('‚úÖ Ìà¨ÏûÖÍµ¨ Ïò§Ìîà ÏôÑÎ£å - OpenGateSectionÏúºÎ°ú Ï†ÑÌôò');
    setSectionType(SectionType.OPEN_GATE);
  };

  // ÏïàÎÇ¥ ÏÑπÏÖò Î†åÎçîÎßÅ Ìï®Ïàò
  const renderSection = () => {
    switch (sectionType) {
      case SectionType.START_SPLIT_BAND:
        return <StartSplitBandSections onGateOpened={handleGateOpened} />;
      case SectionType.BAND_SPLIT_COMPLETE:
        return (
          <div className="flex flex-col items-center justify-center h-full text-center">
            <h1 className="text-5xl font-bold mb-4">Îù† Î∂ÑÎ¶¨ ÏôÑÎ£å!</h1>
            <p className="text-2xl">ÌéòÌä∏Î≥ëÏùÑ Ìà¨ÏûÖÍµ¨Ïóê ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî.</p>
          </div>
        );
      case SectionType.OPEN_GATE:
        return <OpenGateSection />;
      case SectionType.CHECK_RESOURCE:
        return <CheckSection />;
      case SectionType.ERROR:
        return (
          <ResourceErrorSection
            message={errorMessage}
            onHomeClick={() => router.replace('/')}
            onRetryClick={() => setSectionType(SectionType.CHECK_RESOURCE)}
          />
        );
      case SectionType.NORMALLY_END:
        return <NormallyEndSection onHomeClick={handleLogout} />;
      default:
        return <StartSplitBandSections />;
    }
  };

  // ÌòÑÏû¨ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const updateTime = () => {
      setCurrentTime(getFormattedCurrentTime());
    };

    updateTime();
    const timeInterval = setInterval(updateTime, 1000);

    return () => clearInterval(timeInterval);
  }, []);

  // 3Ï¥à ÌõÑ Ï†ïÏÉÅ Ï¢ÖÎ£å ÌôîÎ©¥ÏúºÎ°ú Ï†ÑÌôòÌïòÎäî Î°úÏßÅ
  useEffect(() => {
    if (sectionType === SectionType.CHECK_RESOURCE) {
      console.log('‚úÖ Í≤ÄÏÇ¨ ÌôîÎ©¥ ÏßÑÏûÖ, 3Ï¥à ÌõÑ Ï†ïÏÉÅ Ï¢ÖÎ£å ÌôîÎ©¥ÏúºÎ°ú Ï†ÑÌôòÌï©ÎãàÎã§.');
      const timer = setTimeout(() => {
        setSectionType(SectionType.NORMALLY_END);
      }, 3000);

      return () => clearTimeout(timer); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    }
  }, [sectionType]);

  // NORMALLY_END ÌôîÎ©¥ÏóêÏÑú 5Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  useEffect(() => {
    if (sectionType === SectionType.NORMALLY_END) {
      console.log('‚è∞ Ï†ïÏÉÅ Ï¢ÖÎ£å ÌôîÎ©¥ ÏßÑÏûÖ, 5Ï¥à ÌõÑ Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú ÏûêÎèô Ïù¥ÎèôÌï©ÎãàÎã§.');
      const timer = setTimeout(() => {
        console.log('üîÑ 5Ï¥à ÌÉÄÏûÑÏïÑÏõÉ - Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú ÏûêÎèô Ïù¥Îèô');
        router.replace('/');
      }, 5000);

      return () => clearTimeout(timer); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    }
  }, [sectionType, router]);

  // START_SPLIT_BANDÎ°ú Ï†ÑÌôòÎê† ÎïåÎßàÎã§ Ï¥àÍ∏∞ ÏãúÌÄÄÏä§ Ïû¨Ïã§Ìñâ(Î∂àÌïÑÏöîÌïú Ìè¨Ìä∏ Îã´Í∏∞ Ï†úÍ±∞)
  useEffect(() => {
    if (!socket) return;
    if (sectionType !== SectionType.START_SPLIT_BAND) return;

    // ÌéòÏù¥ÏßÄ Î£∏ Ïû¨Ï∞∏Ïó¨(Ï§ëÎ≥µ Ï∞∏Ïó¨Îäî socket.ioÏóêÏÑú ÏïàÏ†Ñ)
    joinPage('band-split');

    // Ìè¨Ìä∏Î•º Îã´ÏßÄ ÏïäÍ≥† ÏÉÅÌÉú ÏöîÏ≤≠ + Ìè¨Ìä∏ Ïó¥Í∏∞Îßå ÏàòÌñâ (Ïù¥ÎØ∏ Ïó¥Î†§ÏûàÏúºÎ©¥ ÏÑúÎ≤ÑÍ∞Ä already_open ÏùëÎãµ)
    console.log('üì° START_SPLIT_BAND ÏßÑÏûÖ - ÏÉÅÌÉú ÏöîÏ≤≠ Î∞è Ìè¨Ìä∏ Ïó¥Í∏∞ (close Ï†úÍ±∞)');
    socket.emit('serial_port_open');
    requestHardwareStatus();
  }, [sectionType, socket, joinPage, requestHardwareStatus]);

  // ÎåÄÍ∏∞ ÏÉÅÌÉúÏóêÏÑú belt_separatorÎ•º Î™ª Î∞õÏúºÎ©¥ ÏûêÎèô Ïû¨ÏãúÎèÑ (ÏµúÎåÄ 3Ìöå, 5Ï¥à Í∞ÑÍ≤©)
  useEffect(() => {
    if (!waitingForHardware || sectionType !== SectionType.START_SPLIT_BAND) return;
    if (!socket) return;

    if (beltSeparatorCompleted) {
      setWaitingForHardware(false);
      setRetryCount(0);
      return;
    }

    if (retryCount >= 3) return;

    const timer = setTimeout(() => {
      console.log(`‚è≥ belt_separator ÎåÄÍ∏∞ Ï§ë Ïû¨ÏãúÎèÑ #${retryCount + 1}`);
      socket.emit('serial_port_open');
      requestHardwareStatus();
      setRetryCount((c) => c + 1);
    }, 5000);

    return () => clearTimeout(timer);
  }, [waitingForHardware, beltSeparatorCompleted, retryCount, sectionType, socket, requestHardwareStatus]);



  return (
    <div className="h-screen bg-white dark:bg-gray-800 text-gray-800 dark:text-white flex flex-col overflow-hidden">
      {/* Ìó§Îçî */}
      <Header currentTime={currentTime} />

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <main className="flex-1 px-6 lg:px-8 overflow-hidden bg-white dark:bg-gray-800">
        <div className="max-w-7xl mx-auto h-full flex flex-col">
          <section className="grid lg:grid-cols-3 gap-8 flex-1">
            {/* ÏôºÏ™Ω - ÏïàÎÇ¥ Ïª®ÌÖêÏ∏† */}
            {renderSection()}

            {/* Ïò§Î•∏Ï™Ω - ÏÇ¨Ïù¥ÎìúÎ∞î */}
            <RightSection mode="counts" remainingCount={remainingCount} currentCount={currentCount} />
          </section>
        </div>
      </main>

      {/* ÌïòÎã® */}
      <BottomInquire
        rightButtons={[
          {
            text: 'Ìà¨ÏûÖ ÏôÑÎ£å',
            disabled: sectionType !== SectionType.OPEN_GATE, // Ìà¨ÏûÖÍµ¨Í∞Ä Ïó¥Î†∏ÏùÑ ÎïåÎßå ÌôúÏÑ±Ìôî
            onClick: handleCompleteClick,
            className: `px-8 py-4 rounded-4xl font-semibold text-lg transition-all duration-300 ${
              sectionType === SectionType.OPEN_GATE
                ? 'bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-blue-600 hover:to-cyan-600 text-white hover:scale-105 hover:shadow-xl cursor-pointer'
                : 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed'
            }`,
          },
        ]}
      />
      {/* ÏôÑÎ£å Î™®Îã¨ */}
      <CompleteModal
        isOpen={isCompleteModalOpen}
        onClose={() => setIsCompleteModalOpen(false)}
        userHavedPoints={userHavedPoints}
        earnedPoints={earnedPoints}
        totalPoints={totalPoints}
      />
    </div>
  );
};

export default BandSplit;
